@using Progress.Sitefinity.AspNetCore.TagHelpers;
@using Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation;

@model Progress.Sitefinity.AspNetCore.Widgets.Models.Navigation.NavigationViewModel
<environment include="Development">
    <script src="scripts/bootstrap.bundle.js" section-name="Top"></script>
</environment>
<environment exclude="Development">
    <script src="scripts/bootstrap.bundle.min.js" section-name="Top"></script>
</environment>

@{
    var navbarId = Html.GetUniqueId($"navbar");
}

<div class="@Model.WrapperCssClass">
    <nav class="navbar navbar-expand-md navbar-light bg-light" @Html.BuildAttributes(Model.Attributes)>
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target='#@navbarId' aria-controls='@navbarId' aria-expanded="false" aria-label="Toggle Navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="@navbarId">
                <ul class="navbar-nav me-auto mb-2 mb-md-0 flex-wrap">
                    @foreach (var node in Model.Nodes)
                    {
                        RenderRootLevelNode(node);
                    }
                </ul>
            </div>
        </div>
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@{ void RenderRootLevelNode(PageViewModel node)
    {
        if (node.ChildNodes.Count > 0)
        {
            var navbarDropdownId = Html.GetUniqueId($"navbarDropdownMenuLink-{node.Key}");
            <li class="nav-item dropdown @GetClass(node)">
                <a class="nav-link dropdown-toggle" href="#" id='@navbarDropdownId' data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@node.Title</a>
                <ul class="dropdown-menu" aria-labelledby='@navbarDropdownId'>
                    @{RenderSubLevelsRecursive(node);}
                </ul>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link @GetClass(node)" href="@node.Url" target="@node.LinkTarget">@node.Title</a>
            </li>
        }
    }
}

@*Here is specified the rendering for all child levels*@
@{ void RenderSubLevelsRecursive(PageViewModel node)
    {
        foreach (var childNode in node.ChildNodes)
        {
            if (childNode.ChildNodes.Count > 0)
            {
                <li class="dropdown-submenu">
                    <a class="dropdown-item @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">
                        @childNode.Title
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-caret-right-fill" viewBox="0 0 16 16">
                            <path d="M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z" />
                        </svg>
                    </a>
                    <ul class="dropdown-menu">
                        @{RenderSubLevelsRecursive(childNode);}
                    </ul>
                </li>
            }
            else
            {
                <li>
                    <a class="dropdown-item @GetClass(childNode)" href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
                </li>
            }
        }
    }
}
@*Resolves the class that will be added for each node depending whether it is selected*@
@{Microsoft.AspNetCore.Html.IHtmlContent GetClass(PageViewModel node)
    {

        if (node.IsCurrentlyOpened)
        {
            return Html.HtmlSanitize("active");
        }

        return null;
    }
}
